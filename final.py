# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dB8T1MyCEBFs4lVcx5YX_fP-TyrKu8cO
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import requests
from IPython.display import Image, display
import streamlit as st
st.set_page_config(page_title="CineMatch üé•", layout="wide")

API_KEY = '65b4c06693f299a5e0ecccb9e0c276a8'

# Load Data
df = pd.read_csv('imdb_clean.csv')
df.drop(columns=['Unnamed: 0'],inplace=True)
df.drop_duplicates(subset='title',keep='first',inplace=True)
df['title']=df['title'].fillna('')
df['director']=df['director'].fillna('')
df['genre']=df['genre'].fillna('')

df['combined']=df['title']+' '+df['director']+' '+df['genre']
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer(stop_words='english')
tfidf_matrix=tfidf.fit_transform(df['combined'])

similarity=cosine_similarity(tfidf_matrix)


# Fetch Movie Details using TMDB API
def fetch_movie_details(movie_name):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={'65b4c06693f299a5e0ecccb9e0c276a8'}&query={movie_name}"
    data = requests.get(url).json()

    if data['results']:
        movie_id = data['results'][0]['id']

        url_details = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={'65b4c06693f299a5e0ecccb9e0c276a8'}&append_to_response=credits"
        details = requests.get(url_details).json()

        poster = "https://image.tmdb.org/t/p/w500/" + details.get('poster_path', '')
        overview = details.get('overview', 'No description available.')
        rating = details.get('vote_average', 'N/A')

        director = "Not Available"
        for crew in details['credits']['crew']:
            if crew['job'] == 'Director':
                director = crew['name']
                break

        cast = [actor['name'] for actor in details['credits']['cast'][:5]]

        return {
            'poster': poster,
            'overview': overview,
            'rating': rating,
            'director': director,
            'cast': ", ".join(cast)
        }
    else:
        return None

# Recommend Function
def recommend(movie):
    idx = df[df['title'] == movie].index[0]
    distances = similarity[idx]
    movie_list = sorted(list(enumerate(distances)), key=lambda x: x[1], reverse=True)[1:6]

    details_list = []

    for i in movie_list:
        movie_title = df.iloc[i[0]].title
        details = fetch_movie_details(movie_title)
        if details:
            details['title'] = movie_title
            details_list.append(details)

    return details_list

# Streamlit App UI
st.title("CineMatch: Find Your Next Favorite Flick")
# st.image("abcd.jpg", width=1000)
# Center align local image (abcd.jpg)
st.image("abcd.jpg",width=900)

st.markdown("<h1 style='text-align: center; color: #FF4B4B;'>üé• CineMatch</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: gray;'>Find Your Next Favorite Flick üçø</h4>", unsafe_allow_html=True)

selected_movie = st.selectbox("Choose a movie to get recommendations:", df['title'].values)

if st.button("Recommend üéØ"):
    user_details = fetch_movie_details(selected_movie)

    st.markdown("### Your Selected Movie")
    # st.image(user_details['poster'], use_container_width=True)
    
    st.markdown(
    f"""
    <div style="text-align: center;">
        <img src="{user_details['poster']}" width="250">
    </div>
    """,
    unsafe_allow_html=True
      )
    st.markdown(f"**Director:** {user_details['director']}")
    st.markdown(f"**Cast:** {user_details['cast']}")
    st.markdown(f"**Rating:** {user_details['rating']}")
    st.markdown(f"**Description:** {user_details['overview']}")

    st.markdown("---")
    st.subheader("Recommended Movies for You:")

    recommended = recommend(selected_movie)
    cols = st.columns(5)

    for col, movie in zip(cols, recommended):
        with col:
            st.image(movie['poster'], use_container_width=True)
            st.markdown(f"**{movie['title']}**")
            st.markdown(f"*üé¨ {movie['director']}*")
            st.markdown(f"*üë• {movie['cast']}*")
            st.markdown(f"*‚≠ê Rating: {movie['rating']}*")
            st.markdown(f"*üìù {movie['overview'][:100]}...*")